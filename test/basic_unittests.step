#------------------------------------------------------------------------------
# Basic unittests. Your interpreter is expected to pass all the test cases.
#------------------------------------------------------------------------------

# number
0;
11;
10000000;
0.1;
11.11;

# string
"";
" ";
"a";
"abc";
"abc
def";
"abc  

  def";

# None
None;

# comment
0; # aaaa
0; # aaaa # aaaa # aaaa
# aaaa
   # aaaa

# whitespace
      0;
      0    ;
      0    ; # aaaa
;;  ;;  ;;

# list
[];
[1];
[1, 2];
[ 1 , 2 , 3 ];

# parenthesis
(1);
((1));
assert((1) == 1);

# subscription
a = [1, 2, 3];
assert(a[0] == 1);
assert(a[1] == 2);
assert(a[2] == 3);
a = [1, "abc", None];
assert(a[0] == 1);
assert(a[1] == "abc");
assert(a[2] == None);
a = "abc";
assert(a[0] == "a");
assert(a[1] == "b");
assert(a[2] == "c");
assert([1, 2, 3][0] == 1);
assert([1, 2, 3][1] == 2);
assert([1, 2, 3][2] == 3);
a = [1, [2, 3], [4, 5, [6, 7]]];
assert(a[0] == 1);
assert(a[1][0] == 2);
assert(a[1][1] == 3);
assert(a[2][0] == 4);
assert(a[2][1] == 5);
assert(a[2][2][0] == 6);
assert(a[2][2][1] == 7);
assert("abc"[0] == "a");
assert("abc"[1] == "b");
assert("abc"[2] == "c");

# -
-1;
-11.11;
assert(-1 == -1);

# *, /, %
assert(2 * 3 == 6);
assert(2 * 3.1 == 6.2);
assert([0] * 3 == [0, 0, 0]);
assert(3 * [0] == [0, 0, 0]);
assert([] * 3 == []);
assert(3 * [] == []);
assert([[1, 2], [3, 4]] * 2 == [[1, 2], [3, 4], [1, 2], [3, 4]]);
assert(2 * [[1, 2], [3, 4]] == [[1, 2], [3, 4], [1, 2], [3, 4]]);
assert("aa" * 3 == "aaaaaa");
assert(3 * "aa" == "aaaaaa");
assert("" * 3 == "");
assert(3 * "" == "");
assert(6 / 3 == 2);
assert(6 / 4 == 1.5);
assert(6 % 3 == 0);
assert(6 % 4 == 2);
assert(-6 % 3 == 0);
assert(-6 % 4 == 2);

# +, -
assert(2 + 3 == 5);
assert(0.1 + 4 == 4.1);
assert("aa" + "bb" == "aabb");
assert("" + "" == "");
assert([1, 2, 3] + [4, 5, 6] == [1, 2, 3, 4, 5, 6]);
assert([] + [] == []);
assert(2 - 3 == -1);
assert(0.2 - 0.1 == 0.1);

# operator priority
assert(2 + 3 * 4 == 14);
assert(2 - 3 * 4 == -10);
assert(2 + 3 / 4 == 2.75);
assert(2 + 3 % 4 == 5);
assert(2 + 3 - 4 == 1);
assert(2 * 3 % 4 == 2);
assert(2 + -3 == -1);
assert(-2 + -3 == -5);
assert(2 + 3 * (4 + 5) == 29);
assert((2 + 3) * (4 + 5) == 45);
assert((2 - (3 + (4 * 5))) * (6 * (7 - 8) % 5) == -84);
assert((((1))) + (((2))) == 3);

# <, >, <=, >=, ==, !=
assert(1 < 2);
assert(-2 < -1.9);
assert(2 > 1);
assert(-1.9 > -2);
assert(1 <= 2);
assert(-2 <= -1.9);
assert(1 <= 1);
assert(2 >= 1);
assert(-1.9 >= -2);
assert(1 >= 1);
assert(1 == 1);
assert(1 == 1.0);
assert("" == "");
assert("abc" == "abc");
assert(" " == " ");
assert([] == []);
assert([1] == [1]);
assert([1, 2, 3] == [1, 2, 3]);
assert([1, [2], [3, [4]]] == [1, [2], [3, [4]]]);
assert(None == None);
assert(print == print);
assert(assert == assert);
assert((1 == 2) == 0);
assert((1 == "1") == 0);
assert((1 == [1]) == 0);
assert((0 == None) == 0);
assert((0 == print) == 0);
assert(("abc" == "abcd") == 0);
assert(("1" == [1]) == 0);
assert(("None" == None) == 0);
assert(("print" == print) == 0);
assert(([] == [1]) == 0);
assert(([None] == None) == 0);
assert(([print] == print) == 0);
assert((print == assert) == 0);
assert(1 != 2);
assert(1 != "1");
assert(1 != [1]);
assert(0 != None);
assert(0 != print);
assert(print != assert);
assert("abc" != "abcd");
assert([1, 2] != [1, 2, 3]);
assert("1" != [1]);
assert("None" != None);
assert([] != [1]);
assert([None] != None);
assert((1 != 1) == 0);
assert((1 != 1.0) == 0);
assert(("" != "") == 0);
assert(("abc" != "abc") == 0);
assert((" " != " ") == 0);
assert((print != print) == 0);
assert(([] != []) == 0);
assert(([1] != [1]) == 0);
assert(([1, 2, 3] != [1, 2, 3]) == 0);
assert(([1, [2], [3, [4]]] != [1, [2], [3, [4]]]) == 0);
assert((None != None) == 0);

# and, or
assert(1 and 1);
assert((1 and 0) == 0);
assert((0 and 1) == 0);
assert((0 and 0) == 0);
assert(1 or 1);
assert(1 or 0);
assert(0 or 1);
assert((0 or 0) == 0);

# assignment
a = 1;
assert(a == 1);
a = "abc";
assert(a == "abc");
a = a + "d";
assert(a == "abcd");
a = a + a;
assert(a == "abcdabcd");
a = None;
assert(a == None);
a = 2 + 3 * 4;
b = int(14);
assert(a == b);
assert(a == a);
assert(b == b);
a = [1, 2, 3];
b = a;
assert(a == b);
a = [1, 2, 3];
a[0] = 100;
a[1] = 200;
a[2] = 300;
assert(a == [100, 200, 300]);
a = [1, 2, 3];
b = a;
b[0] = "aaa";
b[1] = "bbb";
b[2] = "ccc";
assert(a == ["aaa", "bbb", "ccc"]);
assert((a = 1) == 1);
assert((a = "abc") == "abc");
a = [[1, 2], [3, 4]];
a[0] = 100;
a[1][0] = 200;
a[1][1] = 300;
assert(a == [100, [200, 300]]);
a = [1, 2];
b = [3, 4];
c = [a, b];
assert(c == [[1, 2], [3, 4]]);
a[1] = 200;
b[1] = 400;
assert(c == [[1, 200], [3, 400]]);

# if
a = 100;
b = 0;
if (a > 100) {
    b = 1;
} else {
    b = 2;
}
assert(b == 2);
a = 101;
b = 0;
if (a > 100) {
    b = 1;
} else {
    b = 2;
}
assert(b == 1);
a = 100; b = 100; c = 0;
if (a > 100) { if (b > 100) { c = 1; } else { c = 2; }}
else { if (b > 100) { c = 3; } else { c = 4; } }
assert(c == 4);
a = 100; b = 101; c = 0;
if (a > 100) { if (b > 100) { c = 1; } else { c = 2; }}
else { if (b > 100) { c = 3; } else { c = 4; } }
assert(c == 3);
a = 101; b = 100; c = 0;
if (a > 100) { if (b > 100) { c = 1; } else { c = 2; }}
else { if (b > 100) { c = 3; } else { c = 4; } }
assert(c == 2);
a = 101; b = 101; c = 0;
if (a > 100) { if (b > 100) { c = 1; } else { c = 2; }}
else { if (b > 100) { c = 3; } else { c = 4; } }
assert(c == 1);

# while
i = 0;
while (i < 10) {
    i = i + 1;
}
assert(i == 10);
i = 0;
while (i < 0) {
    i = i + 1;
}
assert(i == 0);
i = 0;
j = 0;
while (i < 10) {
    if (i % 2 == 0) { j = j + 1; }
    i = i + 1;
    ;;;;
}
assert(i == 10);
assert(j == 5);
i = 0;
k = 0;
while (i < 10) {
    j = 0;
    while (j < 10) {
        j = j + 1;
        k = k + 1;
    }
    i = i + 1;
}
assert(k == 100);

# break
i = 0;
while (i < 10) {
    if (i == 5) {
        break;
    }
    i = i + 1;
}
assert(i == 5);
i = 0;
j = 0;
k = 0;
while (i < 10) {
    j = 0;
    while (j < 10) {
        if (i == 5) {
            if (j == 6) {
                break;
            }
        }
        j = j + 1;
        k = k + 1;
    }
    if (i == 5) {
        assert(j == 6);
    } else {
        assert(j == 10);
    }
    i = i + 1;
}
assert(i == 10);
assert(j == 10);
assert(k == 96);

# continue
i = 0;
while (i < 10) {
    if (i % 2) {
        i = i + 1;
        continue;
    }
    assert(i % 2 == 0);
    i = i + 1;
}
assert(i == 10);
i = 0;
k = 0;
while (i < 10) {
    j = 0;
    while (j < 10) {
        if (i == 5) {
            if (j == 6) {
                j = j + 1;
                continue;
            }
        }
        j = j + 1;
        k = k + 1;
    }
    i = i + 1;
}
assert(i == 10);
assert(k == 99);

# builtin functions
assert(1 == 1, "abc");
print(1);
print(1.1);
print("");
print("abc");
print([]);
print([1, 2]);
print(None);
print(1, 2, 3);
print(1, "abc", None, [1, 2]);
assert(len("") == 0);
assert(len("a") == 1);
assert(len("a b c") == 5);
assert(len([]) == 0);
assert(len([1]) == 1);
assert(len([1, 2, 3]) == 3);
assert(int(1) == 1);
assert(int(1.1) == 1);
assert(int(-1.1) == -1);
a = [1, 2, 3];
append(a, 4);
assert(a, [1, 2, 3, 4]);
append(a, [1, 2]);
assert(a, [1, 2, 3, 4, [1, 2]]);
assert(sqrt(4) == 2);
assert(1.48 < sqrt(2.2));
assert(sqrt(2.2) < 1.49);
assert(str("") == "");
assert(str("abc") == "abc");
assert(str(1) == "1");
assert(str(None) == "None");
assert(str([]) == "[]");
assert(str([1, 2, 3]) == "[1, 2, 3]");

